function [Y,Xf,Af] = NARXNN50(X,Xi,Ai)
%NARXNN50 neural network simulation function.
% 
% [Y,Xf,Af] = NARXNN50(X,Xi,Ai):
% 
%   X = 1xTS cell, 1 input dalam TS timesteps
%   Tiap X{1,ts} = 2xQ matrix, input #1 pada timestep ts.
% 
%   Xi = 1x5 cell 1, initial 5 input delay states.
%   Tiap Xi{1,ts} = 2xQ matrix, initial states untuk input #1.
% 
%   Ai = 2x5 cell 2, initial 5 layer delay states.
%   Tiap Ai{1,ts} = 10xQ matrix, initial states untuk layer #1.
%   Tiap Ai{2,ts} = 1xQ matrix, initial states untuk layer #2.
% 
% dan returns:
%   Y = 1xTS cell, 1 output dalam TS timesteps.
%   Tiap Y{1,ts} = 1xQ matrix, output #1 pada timestep ts.
% 
%   Xf = 1x5 cell 1, final 5 input delay states.
%   Tiap Xf{1,ts} = 2xQ matrix, final states untuk input #1.
% 
%   Af = 2x5 cell 2, final 5 layer delay states.
%   Tiap Af{1ts} = 10xQ matrix, final states untuk layer #1.
%   Tiap Af{2ts} = 1xQ matrix, final states untuk layer #2.
% 
% dimana Q merupakan jumlah sampel (atau series) dan TS merupakan
% jumlah timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [0;0.182274463106188];
x1_step1.gain = [0.166666666666667;0.0301092293289286];
x1_step1.ymin = -1;

% Layer 1
b1 = [-1.805978951657689846;0.88412885841657984365; ...
    0.41628514496014046298;1.9074020161699292153; ...
    0.016509694830591337134;-1.379484720187997393; ...
    1.1627117523569721058;-0.013427815321458865666; ...
    -0.63692336177416575271];
IW1_1 = [1.2049476737684452488 -0.086435392119813200806 ...
    0.31237507726534968766 0.5099572728239967212 ...
    0.5187353235604761359 0.22979257625782836816 ...
    -0.11803027141645010267 -0.64589020128702834267 ...
    -0.67411437236628835024 -0.17521939056535945634; ...
    0.16553081816766374024 -0.57988638255443025749 ...
    0.18620924364311397525 0.10617875833274413588 ...
    0.7697082813380625721 0.071405694780138931343 ...
    -0.30551837418123473089 0.57200119406453064919 ...
    0.23850571257015279469 0.12840041439599983453; ...
    -0.57489224520619408576 -0.4301862134269497373 ...
    -0.84846625689767696255 0.39138616770758194452 ...
    -0.1181301180770582826 -0.69070656455843848498 ...
    0.5429498369976557548 -0.88357625699996555912 ...
    -0.01026579237276206702 0.1596799741725800359; ...
    1.2266793318837596605 0.65443918514200982717 ...
    0.72094398770263434795 0.62849581712628255215 ...
    0.65164849294957527537 0.26251545149180982586 ...
    0.28469949742985428687 -0.031898997528842128191 ...
    0.26303288125912721584 -0.91592388783402156616; ...
    0.40178514082569488641 0.38907014490437702436 ...
    1.498717188571363268 0.22609082036363242763 ...
    0.35734444018414457389 0.42250460991509664055 ...
    0.28115237248940633252 -0.041626513394406261526 ...
    0.031299705144017281322 0.41248863562073667666; ...
    -0.14370895686935633573 -0.21075789525171270689 ...
    0.0016217464629934424947 0.14770371622983713422 ...
    0.14716488058087320856 0.02351744354810628157 ...
    0.67052078963531203115 -0.66838278193000133509 ...
    0.27896555638943743016 -0.58469642046259262536; ...
    0.62864461711308139424 0.17756283812448886428 ...
    0.50398613135659409146 0.056269599942577429308 ...
    0.11496485611366023816 -0.073284983960070368414 ...
    0.14136196041182796934 -0.10575175193474008195 ...
    0.086009769761277263256 -0.16047666620508108104; ...
    0.42604971578564110324 0.96210431747545510639 ...
    -0.46323400801987590913 0.58534657909749787663 ...
    -0.019939993838495762013 -0.1609377656988836558 ...
    -1.4201585944451760035 -0.35405255564026683057 ...
    -0.89384283134794950687 -0.060996500250023816259; ...
    -0.98397246424039253032 -0.72697342811935827811 ...
    -0.16790185900751347647 -0.441687239301147061 ...
    0.26205268616211663257 0.15661529234412807643 ...
    0.32821768594630440496 0.21606641602777554301 ...
    0.42578410915793724056 0.23933303381430387491];
LW1_2 = [-0.21543692989708995711 -0.90354589499674409225 ...
    -0.31670642854389208232 0.08480105770813585464 ...
    0.26140922386142562139;0.043918275862635670903 ...
    -0.65830628029314930405 1.0780060564882125718 ...
    0.21523794253398845222 0.091773752436056843518; ...
    -0.79969339657547200417 0.32907234144009545052 ...
    -1.0789021724087051179 -0.047016546063290969026 ...
    -0.26455040870373014439;0.029790655150719592276 ...
    -0.94162247751895145065 -0.43853559186516499757 ...
    -0.72824141260430086398 1.3536526232252208413; ...
    -0.23390891102052205341 0.15883203633832504442 ...
    -0.98485239999170348657 0.51795816744251232944 ...
    -0.52387644444818248779;0.10249704740507092904 ...
    0.70059332603692325847 -0.14397955259526734606 ...
    -0.54716559910774464903 0.17552239192231700038; ...
    0.0064372616998522175225 0.025386645400035375703 ...
    -0.023319000068026535244 0.50432695297459606554 ...
    0.090591882516261851288;0.40505105856271178544 ...
    1.0535359432337747521 1.137378788965954568 ...
    -0.14174206454898483076 -0.13448920991901774924; ...
    -1.1948701043464187155 -0.96215129273983068803 ...
    -0.87522070796635087486 0.62649659358327347558 ...
    1.7465885314624065572];

% Layer 2
b2 = -0.49775569440838124402;
LW2_1 = [-0.52785691959303338017 0.13284755280478913186 ...
    -0.17181191654431898774 -0.20000257574232024882 ...
    -0.12366466501320258486 0.38726484414894546404 ...
    0.42228878630368460456 0.14530775202836385129 ...
    -0.3759191119094770217];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 0.0196662971308146;
y1_step1.xoffset = -0.620387897107001;

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
  X = {X};
end
if (nargin < 2), error('Initial input states Xi argument needed.'); end
if (nargin < 3), error('Initial input states Ai argument needed.'); end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
  Q = size(X{1},2); % samples/series
elseif ~isempty(Xi)
  Q = size(Xi{1},2);
elseif ~isempty(Ai)
  Q = size(Ai{1},2);
else
  Q = 0;
end
if isempty(Xi)
  Xi=cell(1,5);
  Xi(1,:) = {zeros(2,Q)};
end
if isempty(Ai)
  Ai=cell(2,5);
  Ai(1,:) = {zeros(9,Q)};
  Ai(2,:) = {zeros(1,Q)};
end

% Input 1 Delay States
Xd1 = cell(1,6);
for ts=1:5
    Xd1{ts} = mapminmax_apply(Xi{1,ts},x1_step1);
end

% Layer Delay States
Ad1 = [Ai(1,:) cell(1,1)];
Ad2 = [Ai(2,:) cell(1,1)];

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

      % Rotating delay state position
      xdts = mod(ts+4,6)+1;
      adts = mod(ts+4,6)+1;
    
    % Input 1
    Xd1{xdts} = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    tapdelay1 = cat(1,Xd1{mod(xdts-[1 2 3 4 5]-1,6)+1});
    tapdelay2 = cat(1,Ad2{mod(adts-[1 2 3 4 5]-1,6)+1});
    Ad1{adts} = tansig_apply(repmat(b1,1,Q) + IW1_1*tapdelay1 + ...
        LW1_2*tapdelay2);
    
    % Layer 2
    tapdelay1 = cat(1,Ad1{mod(adts-0-1,6)+1});
    Ad2{adts} = repmat(b2,1,Q) + LW2_1*tapdelay1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(Ad2{adts},y1_step1);
end

% Final Delay States
finalxts = TS+(1: 5);
xits = finalxts(finalxts<=5);
xts = finalxts(finalxts>5)-5;
finalats = TS+(1: 5);
ats = mod(finalats-1,6)+1;
Xf = [Xi(:,xits) X(:,xts)];
Af = cell(2,5);
Af(1,:) = Ad1(:,ats);
Af(2,:) = Ad2(:,ats);

% Format Output Arguments
if ~isCellX
  Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
